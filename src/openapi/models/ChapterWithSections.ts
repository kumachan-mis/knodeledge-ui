/* eslint-disable */
/**
 * Web API of kNODEledge
 * App to Create Graphically-Summarized Notes in Three Steps
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SectionOfChapter } from './SectionOfChapter';
import { SectionOfChapterFromJSON, SectionOfChapterFromJSONTyped, SectionOfChapterToJSON } from './SectionOfChapter';

/**
 * ChapterWithSections object
 * @export
 * @interface ChapterWithSections
 */
export interface ChapterWithSections {
  /**
   * Auto-generated chapter ID
   * @type {string}
   * @memberof ChapterWithSections
   */
  id: string;
  /**
   * Chapter name
   * @type {string}
   * @memberof ChapterWithSections
   */
  name: string;
  /**
   * Chapter number
   * @type {number}
   * @memberof ChapterWithSections
   */
  number: number;
  /**
   *
   * @type {Array<SectionOfChapter>}
   * @memberof ChapterWithSections
   */
  sections: Array<SectionOfChapter>;
}

/**
 * Check if a given object implements the ChapterWithSections interface.
 */
export function instanceOfChapterWithSections(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'name' in value;
  isInstance = isInstance && 'number' in value;
  isInstance = isInstance && 'sections' in value;

  return isInstance;
}

export function ChapterWithSectionsFromJSON(json: any): ChapterWithSections {
  return ChapterWithSectionsFromJSONTyped(json, false);
}

export function ChapterWithSectionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChapterWithSections {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    name: json['name'],
    number: json['number'],
    sections: (json['sections'] as Array<any>).map(SectionOfChapterFromJSON),
  };
}

export function ChapterWithSectionsToJSON(value?: ChapterWithSections | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    number: value.number,
    sections: (value.sections as Array<any>).map(SectionOfChapterToJSON),
  };
}
