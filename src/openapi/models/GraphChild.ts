/* eslint-disable */
/**
 * Web API of kNODEledge
 * App to Create Graphically-Summarized Notes in Three Steps
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * GraphChild object
 * @export
 * @interface GraphChild
 */
export interface GraphChild {
  /**
   * Child node name of the graph
   * @type {string}
   * @memberof GraphChild
   */
  name: string;
  /**
   * Graph relation
   * @type {string}
   * @memberof GraphChild
   */
  relation: string;
  /**
   * Graph description
   * @type {string}
   * @memberof GraphChild
   */
  description: string;
  /**
   *
   * @type {Array<GraphChild>}
   * @memberof GraphChild
   */
  children: Array<GraphChild>;
}

/**
 * Check if a given object implements the GraphChild interface.
 */
export function instanceOfGraphChild(value: object): value is GraphChild {
  if (!('name' in value) || value['name'] === undefined) return false;
  if (!('relation' in value) || value['relation'] === undefined) return false;
  if (!('description' in value) || value['description'] === undefined) return false;
  if (!('children' in value) || value['children'] === undefined) return false;
  return true;
}

export function GraphChildFromJSON(json: any): GraphChild {
  return GraphChildFromJSONTyped(json, false);
}

export function GraphChildFromJSONTyped(json: any, ignoreDiscriminator: boolean): GraphChild {
  if (json == null) {
    return json;
  }
  return {
    name: json['name'],
    relation: json['relation'],
    description: json['description'],
    children: (json['children'] as Array<any>).map(GraphChildFromJSON),
  };
}

export function GraphChildToJSON(json: any): GraphChild {
  return GraphChildToJSONTyped(json, false);
}

export function GraphChildToJSONTyped(value?: GraphChild | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    name: value['name'],
    relation: value['relation'],
    description: value['description'],
    children: (value['children'] as Array<any>).map(GraphChildToJSON),
  };
}
