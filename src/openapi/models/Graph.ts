/* eslint-disable */
/**
 * Web API of kNODEledge
 * App to Create Graphically-Summarized Notes in Three Steps
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GraphChild } from './GraphChild';
import { GraphChildFromJSON, GraphChildFromJSONTyped, GraphChildToJSON, GraphChildToJSONTyped } from './GraphChild';

/**
 * Graph object
 * @export
 * @interface Graph
 */
export interface Graph {
  /**
   * Auto-generated section ID
   * @type {string}
   * @memberof Graph
   */
  id: string;
  /**
   * Graph name
   * @type {string}
   * @memberof Graph
   */
  name: string;
  /**
   * Graph paragraph
   * @type {string}
   * @memberof Graph
   */
  paragraph: string;
  /**
   *
   * @type {Array<GraphChild>}
   * @memberof Graph
   */
  children: Array<GraphChild>;
}

/**
 * Check if a given object implements the Graph interface.
 */
export function instanceOfGraph(value: object): value is Graph {
  if (!('id' in value) || value['id'] === undefined) return false;
  if (!('name' in value) || value['name'] === undefined) return false;
  if (!('paragraph' in value) || value['paragraph'] === undefined) return false;
  if (!('children' in value) || value['children'] === undefined) return false;
  return true;
}

export function GraphFromJSON(json: any): Graph {
  return GraphFromJSONTyped(json, false);
}

export function GraphFromJSONTyped(json: any, ignoreDiscriminator: boolean): Graph {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'],
    name: json['name'],
    paragraph: json['paragraph'],
    children: (json['children'] as Array<any>).map(GraphChildFromJSON),
  };
}

export function GraphToJSON(json: any): Graph {
  return GraphToJSONTyped(json, false);
}

export function GraphToJSONTyped(value?: Graph | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    name: value['name'],
    paragraph: value['paragraph'],
    children: (value['children'] as Array<any>).map(GraphChildToJSON),
  };
}
