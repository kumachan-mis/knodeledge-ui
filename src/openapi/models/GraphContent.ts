/* eslint-disable */
/**
 * Web API of kNODEledge
 * App to Create Graphically-Summarized Notes in Three Steps
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GraphChild } from './GraphChild';
import { GraphChildFromJSON, GraphChildFromJSONTyped, GraphChildToJSON, GraphChildToJSONTyped } from './GraphChild';

/**
 * Graph object with only content fields
 * @export
 * @interface GraphContent
 */
export interface GraphContent {
  /**
   * Auto-generated section ID
   * @type {string}
   * @memberof GraphContent
   */
  id: string;
  /**
   * Graph paragraph
   * @type {string}
   * @memberof GraphContent
   */
  paragraph: string;
  /**
   *
   * @type {Array<GraphChild>}
   * @memberof GraphContent
   */
  children: Array<GraphChild>;
}

/**
 * Check if a given object implements the GraphContent interface.
 */
export function instanceOfGraphContent(value: object): value is GraphContent {
  if (!('id' in value) || value['id'] === undefined) return false;
  if (!('paragraph' in value) || value['paragraph'] === undefined) return false;
  if (!('children' in value) || value['children'] === undefined) return false;
  return true;
}

export function GraphContentFromJSON(json: any): GraphContent {
  return GraphContentFromJSONTyped(json, false);
}

export function GraphContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): GraphContent {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'],
    paragraph: json['paragraph'],
    children: (json['children'] as Array<any>).map(GraphChildFromJSON),
  };
}

export function GraphContentToJSON(json: any): GraphContent {
  return GraphContentToJSONTyped(json, false);
}

export function GraphContentToJSONTyped(value?: GraphContent | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    paragraph: value['paragraph'],
    children: (value['children'] as Array<any>).map(GraphChildToJSON),
  };
}
