/* eslint-disable */
/**
 * Web API of kNODEledge
 * App to Create Graphically-Summarized Notes in Three Steps
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GraphChildrenError } from './GraphChildrenError';
import {
  GraphChildrenErrorFromJSON,
  GraphChildrenErrorFromJSONTyped,
  GraphChildrenErrorToJSON,
  GraphChildrenErrorToJSONTyped,
} from './GraphChildrenError';

/**
 * Error Message for GraphChild object
 * @export
 * @interface GraphChildError
 */
export interface GraphChildError {
  /**
   * Error message for graph child name
   * @type {string}
   * @memberof GraphChildError
   */
  name?: string;
  /**
   * Error message for graph child relation
   * @type {string}
   * @memberof GraphChildError
   */
  relation?: string;
  /**
   * Error message for graph child description
   * @type {string}
   * @memberof GraphChildError
   */
  description?: string;
  /**
   *
   * @type {GraphChildrenError}
   * @memberof GraphChildError
   */
  children?: GraphChildrenError;
}

/**
 * Check if a given object implements the GraphChildError interface.
 */
export function instanceOfGraphChildError(value: object): value is GraphChildError {
  return true;
}

export function GraphChildErrorFromJSON(json: any): GraphChildError {
  return GraphChildErrorFromJSONTyped(json, false);
}

export function GraphChildErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): GraphChildError {
  if (json == null) {
    return json;
  }
  return {
    name: json['name'] == null ? undefined : json['name'],
    relation: json['relation'] == null ? undefined : json['relation'],
    description: json['description'] == null ? undefined : json['description'],
    children: json['children'] == null ? undefined : GraphChildrenErrorFromJSON(json['children']),
  };
}

export function GraphChildErrorToJSON(json: any): GraphChildError {
  return GraphChildErrorToJSONTyped(json, false);
}

export function GraphChildErrorToJSONTyped(value?: GraphChildError | null, ignoreDiscriminator: boolean = false): any {
  if (value == null) {
    return value;
  }

  return {
    name: value['name'],
    relation: value['relation'],
    description: value['description'],
    children: GraphChildrenErrorToJSON(value['children']),
  };
}
