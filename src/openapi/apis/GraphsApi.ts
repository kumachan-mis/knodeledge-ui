/* eslint-disable */
/**
 * Web API of kNODEledge
 * App to Create Graphically-Summarized Notes in Three Steps
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  ApplicationErrorResponse,
  GraphDeleteErrorResponse,
  GraphDeleteRequest,
  GraphFindErrorResponse,
  GraphFindRequest,
  GraphFindResponse,
  GraphSectionalizeErrorResponse,
  GraphSectionalizeRequest,
  GraphSectionalizeResponse,
  GraphUpdateErrorResponse,
  GraphUpdateRequest,
  GraphUpdateResponse,
} from '../models/index';
import {
  ApplicationErrorResponseFromJSON,
  ApplicationErrorResponseToJSON,
  GraphDeleteErrorResponseFromJSON,
  GraphDeleteErrorResponseToJSON,
  GraphDeleteRequestFromJSON,
  GraphDeleteRequestToJSON,
  GraphFindErrorResponseFromJSON,
  GraphFindErrorResponseToJSON,
  GraphFindRequestFromJSON,
  GraphFindRequestToJSON,
  GraphFindResponseFromJSON,
  GraphFindResponseToJSON,
  GraphSectionalizeErrorResponseFromJSON,
  GraphSectionalizeErrorResponseToJSON,
  GraphSectionalizeRequestFromJSON,
  GraphSectionalizeRequestToJSON,
  GraphSectionalizeResponseFromJSON,
  GraphSectionalizeResponseToJSON,
  GraphUpdateErrorResponseFromJSON,
  GraphUpdateErrorResponseToJSON,
  GraphUpdateRequestFromJSON,
  GraphUpdateRequestToJSON,
  GraphUpdateResponseFromJSON,
  GraphUpdateResponseToJSON,
} from '../models/index';

export interface GraphsDeleteRequest {
  graphDeleteRequest?: GraphDeleteRequest;
}

export interface GraphsFindRequest {
  graphFindRequest?: GraphFindRequest;
}

export interface GraphsSectionalizeRequest {
  graphSectionalizeRequest?: GraphSectionalizeRequest;
}

export interface GraphsUpdateRequest {
  graphUpdateRequest?: GraphUpdateRequest;
}

/**
 *
 */
export class GraphsApi extends runtime.BaseAPI {
  /**
   * Delete graph
   */
  async graphsDeleteRaw(
    requestParameters: GraphsDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/graphs/delete`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: GraphDeleteRequestToJSON(requestParameters['graphDeleteRequest']),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete graph
   */
  async graphsDelete(
    requestParameters: GraphsDeleteRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.graphsDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * Find graph
   */
  async graphsFindRaw(
    requestParameters: GraphsFindRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GraphFindResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/graphs/find`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: GraphFindRequestToJSON(requestParameters['graphFindRequest']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GraphFindResponseFromJSON(jsonValue));
  }

  /**
   * Find graph
   */
  async graphsFind(
    requestParameters: GraphsFindRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GraphFindResponse> {
    const response = await this.graphsFindRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Sectionalize into graphs
   */
  async graphsSectionalizeRaw(
    requestParameters: GraphsSectionalizeRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GraphSectionalizeResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/graphs/sectionalize`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: GraphSectionalizeRequestToJSON(requestParameters['graphSectionalizeRequest']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GraphSectionalizeResponseFromJSON(jsonValue));
  }

  /**
   * Sectionalize into graphs
   */
  async graphsSectionalize(
    requestParameters: GraphsSectionalizeRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GraphSectionalizeResponse> {
    const response = await this.graphsSectionalizeRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Update graph
   */
  async graphsUpdateRaw(
    requestParameters: GraphsUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<GraphUpdateResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/graphs/update`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: GraphUpdateRequestToJSON(requestParameters['graphUpdateRequest']),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => GraphUpdateResponseFromJSON(jsonValue));
  }

  /**
   * Update graph
   */
  async graphsUpdate(
    requestParameters: GraphsUpdateRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<GraphUpdateResponse> {
    const response = await this.graphsUpdateRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
