/* eslint-disable */
/**
 * Web API of kNODEledge
 * App to Create Graphically-Summarized Notes in Three Steps
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  ApplicationErrorResponse,
  ProjectCreateErrorResponse,
  ProjectCreateRequest,
  ProjectCreateResponse,
  ProjectListErrorResponse,
  ProjectListRequest,
  ProjectListResponse,
} from '../models/index';
import {
  ApplicationErrorResponseFromJSON,
  ApplicationErrorResponseToJSON,
  ProjectCreateErrorResponseFromJSON,
  ProjectCreateErrorResponseToJSON,
  ProjectCreateRequestFromJSON,
  ProjectCreateRequestToJSON,
  ProjectCreateResponseFromJSON,
  ProjectCreateResponseToJSON,
  ProjectListErrorResponseFromJSON,
  ProjectListErrorResponseToJSON,
  ProjectListRequestFromJSON,
  ProjectListRequestToJSON,
  ProjectListResponseFromJSON,
  ProjectListResponseToJSON,
} from '../models/index';

export interface CreateRequest {
  projectCreateRequest?: ProjectCreateRequest;
}

export interface ListRequest {
  projectListRequest?: ProjectListRequest;
}

/**
 *
 */
export class ProjectsApi extends runtime.BaseAPI {
  /**
   * Create new project
   */
  async createRaw(
    requestParameters: CreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ProjectCreateResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/projects/create`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ProjectCreateRequestToJSON(requestParameters.projectCreateRequest),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ProjectCreateResponseFromJSON(jsonValue));
  }

  /**
   * Create new project
   */
  async create(
    requestParameters: CreateRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ProjectCreateResponse> {
    const response = await this.createRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Get list of projects
   */
  async listRaw(
    requestParameters: ListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ProjectListResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/api/projects/list`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ProjectListRequestToJSON(requestParameters.projectListRequest),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ProjectListResponseFromJSON(jsonValue));
  }

  /**
   * Get list of projects
   */
  async list(
    requestParameters: ListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ProjectListResponse> {
    const response = await this.listRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
